{"version":3,"sources":["api/hotels/endpoints.ts","state/actions/types.ts","pages/ContentPage/ContentPage.tsx","pages/Dashboard.tsx","components/shared/input/Input.tsx","components/shared/formikAdapters/FormikInput.tsx","state/actions/hotels.ts","state/selectors/hotels.ts","utils/validation-schemas.ts","pages/NotFound/NotFound.tsx","router/AuthenticatedRouter.tsx","router/RootRouter.tsx","App.tsx","reportWebVitals.ts","state/reducers/productsReducer.ts","state/reducers/hotelsReducer.ts","state/sagas/hotels.ts","state/sagas/index.ts","state/store.ts","index.tsx","api/axios.ts","api/auth/index.ts","api/hotels/index.ts","api/auth/endpoints.ts"],"names":["getHotels","Axios","instance","get","postHotel","hotel","post","HotelsType","ContentPage","Dashboard","process","Input","label","error","props","FormikInput","useField","name","field","meta","touched","undefined","ADD_PRODUCTS","allHotelsSelector","state","hotels","UserFormSchema","Yup","shape","firstName","min","max","required","lastName","email","defaultValues","NotFound","dispatch","useDispatch","hotelsData","useSelector","console","log","login","a","loginUser","password","res","data","access_token","refresh_token","localStorage","setItem","useEffect","type","GET_All_REQUEST","onClick","description","phone","address","country","city","street","address1","address2","zip","location","latitude","longtitude","ADD_HOTEL_REQUEST","payload","registerUser","initialValues","validationSchema","onSubmit","val","AuthenticatedRouter","to","path","exact","RootRouter","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","products","id","loading","items","itemsCount","total","loadHotels","watchLoadHotels","addHotel","watchAddHotel","call","response","put","GET_ALL_SUCCESS","takeLatest","ok","ADD_HOTEL_SUCCESS","objectId","all","hotelsSaga","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","action","Types","GET_ALL_FAIL","ADD_HOTEL_FAIL","store","createStore","applyMiddleware","run","rootSaga","ReactDOM","render","StrictMode","document","getElementById","axios","create","baseURL","interceptors","request","use","req","token","getItem","headers","err","status","window","replace","Promise","reject","body"],"mappings":"4GAAA,gFAGaA,EAAY,WACvB,OAAOC,IAAMC,SAASC,IAAI,WAGfC,EAAY,SAACC,GACxB,OAAOJ,IAAMC,SAASI,KAAK,SAAUD,K,4GCN3BE,E,uECACC,EAAc,WAEzB,OACE,8BACE,wDCJOC,EAAY,WAEvB,OACE,gCACE,+CACA,4BAAIC,c,wECIGC,EAAQ,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,MAAUC,EAAkC,iCACzE,OAAQ,8BACN,kCACG,+BAAOF,IACP,qCAAWE,IACVD,GAAS,8BAAMA,UCZVE,EAAc,SAACD,GAAiC,IAAD,EACpCE,YAASF,EAAMG,MADqB,mBACnDC,EADmD,KAC5CC,EAD4C,KAEpDN,EAAQM,EAAKC,QAAUD,EAAKN,WAAQQ,EAE1C,OACE,cAAC,EAAD,uCACMH,GACAJ,GAFN,IAGED,MAAOA,MJZAS,EAAe,gB,SAEhBf,K,kCAAAA,E,kCAAAA,E,4BAAAA,E,sCAAAA,E,sCAAAA,E,iCAAAA,M,KKCL,ICDMgB,EAAoB,SAACC,GAAD,OAAqBA,EAAMC,Q,QCA/CC,EAAiBC,MAAaC,MAAM,CAC/CC,UAAWF,MAAaG,IAAI,EAAG,mBAAmBC,IAAI,GAAI,oBAAoBC,WAC9EC,SAAUN,MAAaG,IAAI,EAAG,mBAAmBC,IAAI,GAAI,oBAAoBC,WAC7EE,MAAOP,MAAaO,MAAM,iBAAiBF,aCYvCG,EAAgC,CACpCN,UAAW,GACXI,SAAU,GACVC,MAAO,IAGIE,EAAW,WACtB,IAAMC,EAAWC,cAEXC,EAAaC,YAAYjB,GAC/BkB,QAAQC,IAAIH,GAGZ,IASMI,EAAK,uCAAG,kCAAAC,EAAA,+EAEQC,oBAAU,CAC1BX,MAAO,eACPY,SAAU,aAJF,OAEJC,EAFI,SAO8BA,EAAIC,KAApCC,EAPE,EAOFA,aAAcC,EAPZ,EAOYA,cACtBC,aAAaC,QAAQ,QAASH,GAC9BE,aAAaC,QAAQ,gBAAiBF,GAEtCT,QAAQC,IAAIK,EAAIC,MAXN,kDAaVP,QAAQC,IAAR,MAbU,0DAAH,qDAiBXW,qBAAU,WACRhB,EHtD6B,CAC/BiB,KAAM/C,EAAWgD,oBGsDd,IAwBH,OACE,gCACE,wBAAQC,QAtBS,WHvDI,IAACnD,EGwDxBgC,GHxDwBhC,EGwDH,CACnBY,KAAM,sBACNwC,YAAa,MACbC,MAAO,iBACPC,QAAS,CACPC,QAAS,MACTC,KAAM,MACNrC,MAAO,MACPsC,OAAQ,MACRC,SAAU,MACVC,SAAU,MACVC,IAAK,EACLC,SAAU,CACRC,SAAU,IACVC,WAAY,OHtEwB,CAC5Cd,KAAM/C,EAAW8D,kBACjBC,QAASjE,MG2EL,0BACA,wBAAQmD,QAvDO,WACjBe,uBAAa,CACXrC,MAAO,eACPL,UAAW,QACXI,SAAU,YACVa,SAAU,cAkDV,sBACA,wBAAQU,QAASb,EAAjB,mBACA,cAAC,IAAD,CACE6B,cAAerC,EACfsC,iBAAkB/C,EAClBgD,SAAU,SAACC,GACTlC,QAAQC,IAAIiC,IAJhB,SAOE,eAAC,IAAD,WACE,cAAC,EAAD,CAAa1D,KAAK,YAAYL,MAAM,eACpC,cAAC,EAAD,CAAaK,KAAK,WAAWL,MAAM,cACnC,cAAC,EAAD,CAAaK,KAAK,QAAQL,MAAM,UAEhC,mDC7FK,SAASgE,IACtB,OACE,gCACE,cAAC,IAAD,CAAMC,GAAG,aACT,cAAC,IAAD,CAAMA,GAAG,MACT,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,WAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOC,OAAK,EAACD,KAAK,IAAlB,SACE,cAAC,EAAD,YCdH,IAAME,EAAa,WAGxB,OACE,cAAC,IAAD,UACqB,cAACJ,EAAD,OCGVK,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,yBCPRQ,EAAe,CACnBC,SAAU,CACR,CACEC,GAAI,EACJ7E,KAAM,WCHN2E,EAAe,CACnBG,SAAS,EACTC,MAAO,GACPC,WAAY,EACZC,MAAO,G,2BCFCC,G,WAeAC,G,WAIAC,G,WAmBAC,G,cAtCV,SAAUH,IAAV,uEAE0B,OAF1B,kBAEgCI,YAAKvG,aAFrC,OAKI,OAHMwG,EAFV,OAGI/D,QAAQC,IAAI8D,GAHhB,SAKUC,YAAK,CACTnD,KAAM/C,EAAWmG,gBACjBpC,QAASkC,EAASxD,OAPxB,uDAWIP,QAAQC,IAAR,MAXJ,qDAeA,SAAU0D,IAAV,iEACE,OADF,SACQO,YAAWpG,EAAWgD,gBAAiB4C,GAD/C,uCAIA,SAAUE,EAAV,4EAE0B,OAFL/B,EAArB,EAAqBA,QAArB,kBAEgCiC,YAAKnG,YAAWkE,GAFhD,UAEUkC,EAFV,OAGI/D,QAAQC,IAAI8D,IAERA,EAASI,GALjB,gBAMM,OANN,SAMYH,YAAK,CACTnD,KAAM/C,EAAWsG,kBACjBvC,QAAQ,2BACHA,GADE,IAELwB,GAAIU,EAASxD,KAAK8D,aAV5B,yDAeIrE,QAAQC,IAAR,MAfJ,sDAmBA,SAAU4D,IAAV,iEACE,OADF,SACQK,YAAWpG,EAAW8D,kBAAmBgC,GADjD,uCAIe,8EACb,OADa,SACPU,YAAI,CACRX,IACAE,MAHW,uC,kBC5CA,8EACb,OADa,SACPS,YAAI,CACRC,MAFW,uCCOf,IAAMC,EAAiBC,cAEjBC,GAAcC,YAAgB,CAClCvB,SJFa,WAAwC,IAAvCrE,EAAsC,uDAA9BoE,EAAcyB,EAAgB,uCACpD,OAAQA,EAAO/D,MACb,KAAKgE,EACH,OAAO,2BACF9F,GADL,IAEEqE,SAAS,GAAD,mBAAMrE,EAAMqE,UAAZ,CAAsBwB,EAAO/C,YAIzC,QACE,OAAO9C,IIPXC,OHJa,WAAwC,IAAvCD,EAAsC,uDAA9BoE,EAAcyB,EAAgB,uCACpD,OAAQA,EAAO/D,MACb,KAAK/C,EAAWgD,gBACd,OAAO,2BACF/B,GADL,IAEEuE,SAAS,IAGb,KAAKxF,EAAWmG,gBACd,OAAO,2BACFlF,GADL,IAEEuE,SAAS,EACTC,MAAOqB,EAAO/C,QAAQ0B,MACtBC,WAAYoB,EAAO/C,QAAQ2B,WAC3BC,MAAOmB,EAAO/C,QAAQ4B,QAG1B,KAAK3F,EAAWgH,aACd,OAAO,2BACF/F,GADL,IAEEuE,SAAS,IAIb,KAAKxF,EAAW8D,kBACd,OAAO,2BACF7C,GADL,IAEEuE,SAAS,IAGb,KAAKxF,EAAWsG,kBACd,OAAO,2BACFrF,GADL,IAEEuE,SAAS,EACTC,MAAM,GAAD,mBAAMxE,EAAMwE,OAAZ,CAAmBqB,EAAO/C,UAC/B2B,WAAYzE,EAAMyE,WAAa,EAC/BC,MAAO1E,EAAM0E,MAAQ,IAGzB,KAAK3F,EAAWiH,eACd,OAAO,2BACFhG,GADL,IAEEuE,SAAS,IAIb,QACE,OAAOvE,MGvCAiG,GAAQC,YAAYP,GAAaQ,YAAgBV,IAE9DA,EAAeW,IAAIC,GCZnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1B/C,K,qECjBMjF,E,OAAWiI,EAAMC,OAAO,CAC5BC,QAAS,8BAGXnI,EAASoI,aAAaC,QAAQC,KAAI,SAACC,GACjC,IAAMC,EAAQvF,aAAawF,QAAQ,SAOnC,OALID,IACFD,EAAIG,QAAU,CACZ,cAAgB,UAAhB,OAA2BF,KAGxBD,KAGTvI,EAASoI,aAAa9B,SAASgC,KAC7B,SAACzF,GAAU,OAAOA,IADpB,uCAEE,WAAO8F,GAAP,SAAAjG,EAAA,6DACkBO,aAAawF,QAAQ,kBAIF,MAAxBE,EAAIrC,SAASsC,QACtBC,OAAO7E,SAAS8E,QAAQ,UAE1BvG,QAAQC,IAAImG,EAAIrC,UARlB,kBASSyC,QAAQC,OAAOL,IATxB,2CAFF,uDAee,KACb3I,a,gCClCF,8G,gCCAA,6G,gCCCA,gFAGaqE,EAAe,SAAC4E,GAC3B,OAAOlJ,IAAMC,SAASI,KAAK,YAAa6I,IAG7BtG,EAAY,SAACsG,GACxB,OAAOlJ,IAAMC,SAASI,KAAK,SAAU6I,K","file":"static/js/main.d9debb52.chunk.js","sourcesContent":["import Axios from '../axios';\nimport { GetHotelsResponse, Hotel, PostHotelResponse } from './types';\n\nexport const getHotels = (): Promise<GetHotelsResponse> => {\n  return Axios.instance.get('/hotel');\n}\n\nexport const postHotel = (hotel: Hotel): Promise<PostHotelResponse> => {\n  return Axios.instance.post('/hotel', hotel);\n}\n","export const ADD_PRODUCTS = 'ADD_PRODUCTS';\n\nexport enum HotelsType {\n  GET_All_REQUEST = 'GET_All_REQUEST',\n  GET_ALL_SUCCESS = 'GET_ALL_SUCCESS',\n  GET_ALL_FAIL = 'GET_ALL_FAIL',\n\n  ADD_HOTEL_REQUEST = 'ADD_HOTEL_REQUEST',\n  ADD_HOTEL_SUCCESS = 'ADD_HOTEL_SUCCESS',\n  ADD_HOTEL_FAIL = 'ADD_HOTEL_FAIL'\n};\n","import React from 'react';\n\nexport const ContentPage = () => {\n\n  return (\n    <div>\n      <p>Here is content page</p>\n    </div>\n  );\n};\n","import React from 'react';\r\n\r\nexport const Dashboard = () => {\r\n\r\n  return (\r\n    <div>\r\n      <p>Dashboard page</p>\r\n      <p>{process.env.REACT_APP_CHECK_KEY}</p>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\nimport { FormikInput, InputProps } from '../../../models/formik';\n\nexport interface FormikTextInputProps extends FormikInput<InputProps> {\n  type?: 'number' | 'text' | 'email';\n\n  onBlur?: (e: React.FocusEvent<Element>) => void;\n  onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  value?: string;\n}\n\nexport const Input = ({ label, error, ...props }: FormikTextInputProps) => {\n  return (<div>\n    <label>\n       <span>{label}</span>\n       <input {...props} />\n       {error && <div>{error}</div>}\n    </label>\n  </div>)\n}\n","import { useField } from 'formik';\nimport React from 'react';\nimport { FormikTextInputProps, Input } from '../input';\n\nexport const FormikInput = (props: FormikTextInputProps) => {\n  const [field, meta] = useField(props.name);\n  const error = meta.touched ? meta.error : undefined;\n\n  return (\n    <Input\n      {...field}\n      {...props}\n      error={error}\n    />\n  )\n\n}\n","import { getHotels, Hotel, postHotel } from '../../api/hotels';\r\nimport { HotelsType } from './types';\r\n\r\nexport const loadHotels = () => ({\r\n  type: HotelsType.GET_All_REQUEST\r\n});\r\n\r\nexport const createHotel = (hotel: Hotel) => ({\r\n  type: HotelsType.ADD_HOTEL_REQUEST,\r\n  payload: hotel\r\n});\r\n\r\n// export const loadHotels = () => async (dispatch: any) => {\r\n//   dispatch ({\r\n//     type: HotelsType.GET_All_REQUEST,\r\n//   });\r\n\r\n//   try {\r\n//     const res = await getHotels();\r\n\r\n//     dispatch ({\r\n//       type: HotelsType.GET_ALL_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n\r\n//   } catch (err) {\r\n//     dispatch ({\r\n//       type: HotelsType.GET_ALL_FAIL,\r\n//       payload: err\r\n//     });\r\n//   }\r\n// };\r\n\r\n// export const createHotel = (hotel: Hotel) => async (dispatch: any) =>  {\r\n//   dispatch ({\r\n//     type: HotelsType.ADD_HOTEL_REQUEST,\r\n//   });\r\n\r\n//   try {\r\n//     const res = await postHotel(hotel);\r\n\r\n//     dispatch ({\r\n//       type: HotelsType.ADD_HOTEL_SUCCESS,\r\n//       payload: {\r\n//         ...hotel,\r\n//         id: res.data.objectId\r\n//       }\r\n//     });\r\n\r\n//   } catch (err) {\r\n//     dispatch ({\r\n//       type: HotelsType.ADD_HOTEL_FAIL,\r\n//       payload: err\r\n//     });\r\n//   }\r\n// }\r\n","import { AppState } from '../store';\r\n\r\nexport const allHotelsSelector = (state: AppState) => state.hotels;\r\n","import * as Yup from 'yup';\n\nexport const UserFormSchema = Yup.object().shape({\n  firstName: Yup.string().min(3, 'Minimum 3 chars').max(10, 'Maximum 10 chars').required(),\n  lastName: Yup.string().min(3, 'Minimum 3 chars').max(10, 'Maximum 10 chars').required(),\n  email: Yup.string().email('Invalid email').required()\n})\n","import { Form, Formik } from 'formik';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Category, deleteCategory, getCategories, postCategory } from '../../api';\nimport { loginUser, registerUser } from '../../api/auth';\nimport { FormikInput } from '../../components/shared/formikAdapters';\nimport { createHotel, loadHotels } from '../../state/actions/hotels';\nimport { allHotelsSelector } from '../../state/selectors/hotels';\n//import { useHotels } from '../../hooks/hotels/useHotels';\nimport { UserFormSchema } from '../../utils/validation-schemas';\n\ninterface UserFormValues {\n  firstName: string;\n  lastName: string;\n  email: string;\n}\n\nconst defaultValues: UserFormValues = {\n  firstName: '',\n  lastName: '',\n  email: ''\n}\n\nexport const NotFound = () => {\n  const dispatch = useDispatch();\n\n  const hotelsData = useSelector(allHotelsSelector);\n  console.log(hotelsData);\n\n\n  const createUser = () => {\n    registerUser({\n      email: 'd.das@ads.dd',\n      firstName: 'fdsdf',\n      lastName: 'dfgdfgdfg',\n      password: 'Aa123456'\n    })\n  }\n\n  const login = async () => {\n    try {\n      const res = await loginUser({\n        email: 'd.das@ads.dd',\n        password: 'Aa123456'\n      });\n\n      const { access_token, refresh_token } = res.data;\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('refresh_token', refresh_token);\n\n      console.log(res.data);\n    } catch(err) {\n      console.log(err);\n    }\n  }\n\n  useEffect(() => {\n    dispatch(loadHotels());\n  }, [])\n  //const { data, addHotel } = useHotels();\n  //console.log(data);\n\n  const createHotels = () => {\n    dispatch(createHotel({\n      name: 'newwwww hotefhnfghl',\n      description: 'aaa',\n      phone: '38080664479770',\n      address: {\n        country: 'aaa',\n        city: 'aaa',\n        state: 'aaa',\n        street: 'aaa',\n        address1: 'aaa',\n        address2: 'aaa',\n        zip: 0,\n        location: {\n          latitude: '0',\n          longtitude: '0'\n        }\n      }}))\n  };\n\n  return (\n    <div>\n      <button onClick={createHotels}>Create hotel</button>\n      <button onClick={createUser}>Register</button>\n      <button onClick={login}>Login</button>\n      <Formik\n        initialValues={defaultValues}\n        validationSchema={UserFormSchema}\n        onSubmit={(val) => {\n          console.log(val);\n        }}\n        >\n        <Form>\n          <FormikInput name='firstName' label='First Name' />\n          <FormikInput name='lastName' label='Last Name'/>\n          <FormikInput name='email' label='Email'/>\n\n          <button>Send</button>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n","import React from 'react'\r\nimport { Link, Route, Switch } from 'react-router-dom'\r\nimport { ContentPage } from '../pages/ContentPage'\r\nimport { Dashboard } from '../pages/Dashboard'\r\nimport { NotFound } from '../pages/NotFound'\r\n\r\nexport default function AuthenticatedRouter() {\r\n  return (\r\n    <div>\r\n      <Link to='/content'></Link>\r\n      <Link to='/'></Link>\r\n      <Switch>\r\n        <Route path='/content'>\r\n          <ContentPage />\r\n        </Route>\r\n        <Route exact path='/'>\r\n          <Dashboard />\r\n        </Route>\r\n        <Route exact path='*'>\r\n          <NotFound />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AuthenticatedRouter from './AuthenticatedRouter';\r\nimport UnauthenticatedRouter from './UnauthenticatedRouter';\r\n\r\nexport const RootRouter = () => {\r\n  const isAuthenticated = true;\r\n\r\n  return (\r\n    <BrowserRouter>\r\n      {isAuthenticated ? <AuthenticatedRouter /> : <UnauthenticatedRouter />}\r\n    </BrowserRouter>\r\n  );\r\n};\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport { RootRouter } from './router/RootRouter';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <RootRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as Types from '../actions/types';\n\nconst initialState = {\n  products: [\n    {\n      id: 1,\n      name: 'apple'\n    }\n  ]\n};\n\nexport default (state = initialState, action: any) => {\n  switch (action.type) {\n    case Types.ADD_PRODUCTS: {\n      return {\n        ...state,\n        products: [...state.products, action.payload]\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n","import * as Types from '../actions/types';\r\nimport { HotelsType } from '../actions/types';\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  items: [],\r\n  itemsCount: 0,\r\n  total: 0\r\n};\r\n\r\nexport default (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case HotelsType.GET_All_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    }\r\n    case HotelsType.GET_ALL_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        items: action.payload.items,\r\n        itemsCount: action.payload.itemsCount,\r\n        total: action.payload.total\r\n      };\r\n    }\r\n    case HotelsType.GET_ALL_FAIL: {\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    }\r\n\r\n    case HotelsType.ADD_HOTEL_REQUEST: {\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n    }\r\n    case HotelsType.ADD_HOTEL_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        items: [...state.items, action.payload],\r\n        itemsCount: state.itemsCount + 1,\r\n        total: state.total + 1\r\n      };\r\n    }\r\n    case HotelsType.ADD_HOTEL_FAIL: {\r\n      return {\r\n        ...state,\r\n        loading: false\r\n      };\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n","import { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { getHotels, postHotel } from \"../../api/hotels\";\r\nimport { HotelsType } from \"../actions/types\";\r\n\r\n\r\nfunction* loadHotels(): Generator {\r\n  try {\r\n    const response: any = yield call(getHotels);\r\n    console.log(response);\r\n\r\n    yield put ({\r\n      type: HotelsType.GET_ALL_SUCCESS,\r\n      payload: response.data\r\n    });\r\n\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nfunction* watchLoadHotels() {\r\n  yield takeLatest(HotelsType.GET_All_REQUEST, loadHotels);\r\n}\r\n\r\nfunction* addHotel({ payload }: any): Generator {\r\n  try {\r\n    const response: any = yield call(postHotel, payload);\r\n    console.log(response);\r\n\r\n    if (response.ok) {\r\n      yield put ({\r\n        type: HotelsType.ADD_HOTEL_SUCCESS,\r\n        payload: {\r\n          ...payload,\r\n          id: response.data.objectId\r\n        }\r\n      });\r\n    }\r\n  } catch(err) {\r\n    console.log(err);\r\n  }\r\n};\r\n\r\nfunction* watchAddHotel() {\r\n  yield takeLatest(HotelsType.ADD_HOTEL_REQUEST, addHotel);\r\n}\r\n\r\nexport default function* () {\r\n  yield all([\r\n    watchLoadHotels(),\r\n    watchAddHotel()\r\n  ]);\r\n}\r\n","import { all } from 'redux-saga/effects';\r\nimport hotelsSaga from './hotels';\r\n\r\nexport default function* () {\r\n  yield all([\r\n    hotelsSaga()\r\n  ]);\r\n}\r\n","import { combineReducers, createStore, applyMiddleware } from 'redux';\n//import thunk from 'redux-thunk';\n\nimport createSagaMiddleware from 'redux-saga';\n\nimport ProductsReducer from './reducers/productsReducer';\nimport HotelsReducer from './reducers/hotelsReducer';\n\nimport rootSaga from './sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst rootReducer = combineReducers({\n  products: ProductsReducer,\n  hotels: HotelsReducer\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\nexport const store = createStore(rootReducer, applyMiddleware(sagaMiddleware));\n\nsagaMiddleware.run(rootSaga);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { store } from './state/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import axios from 'axios';\n\n\nconst instance = axios.create({\n  baseURL: 'http://192.168.0.148:3000'\n});\n\ninstance.interceptors.request.use((req) => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    req.headers = {\n      'Authorization': `Bearer ${token}`\n    }\n  }\n  return req;\n})\n\ninstance.interceptors.response.use(\n  (res) => { return res; },\n  async (err) => {\n    const refresh = localStorage.getItem('refresh_token');\n    if (refresh) {\n      // await refreshToken();\n      // instance(err.config);\n    } else if (err.response.status === 401) {\n      window.location.replace('/login');\n    }\n    console.log(err.response);\n    return Promise.reject(err);\n  }\n);\n\nexport default {\n  instance\n}\n","export * from './endpoints';\nexport * from './types';\n","export * from './endpoints';\nexport * from './types';\n","import { AxiosResponse } from \"axios\";\nimport Axios from \"../axios\";\nimport { LoginUserBody, LoginUserResponse, RegisterUserBody } from \"./types\";\n\nexport const registerUser = (body: RegisterUserBody): Promise<any> => {\n  return Axios.instance.post('/register', body);\n}\n\nexport const loginUser = (body: LoginUserBody): Promise<AxiosResponse<LoginUserResponse>> => {\n  return Axios.instance.post('/login', body);\n}\n"],"sourceRoot":""}